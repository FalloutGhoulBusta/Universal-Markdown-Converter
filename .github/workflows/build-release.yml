name: Build and Release

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v1.0.0, v2.1.3, etc.
  workflow_dispatch:  # Allows manual triggering

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create application icon
      run: |
        echo "Creating application icon..."
        python create_icon.py
        if (Test-Path "icon.ico") {
          echo "✅ Icon created successfully: icon.ico"
          $iconInfo = Get-Item "icon.ico"
          echo "Icon size: $($iconInfo.Length) bytes"
        } else {
          echo "⚠️ Warning: icon.ico not created, executable will use default icon"
        }

    - name: Create PyInstaller spec file
      run: |
        @"
        # -*- mode: python ; coding: utf-8 -*-
        import os

        block_cipher = None

        a = Analysis(
            ['universal_md_converter.py'],
            pathex=[],
            binaries=[],
            datas=[],
            hiddenimports=[
                'markdown',
                'markdown.extensions.tables',
                'markdown.extensions.fenced_code',
                'markdown.extensions.codehilite',
                'markdown.extensions.toc',
                'markdown.extensions.attr_list',
                'markdown.extensions.def_list',
                'markdown.extensions.footnotes',
                'tkinter',
                'tkinter.filedialog',
                'tkinter.messagebox',
                'tkinter.ttk'
            ],
            hookspath=[],
            hooksconfig={},
            runtime_hooks=[],
            excludes=[],
            win_no_prefer_redirects=False,
            win_private_assemblies=False,
            cipher=block_cipher,
            noarchive=False,
        )

        pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)

        exe = EXE(
            pyz,
            a.scripts,
            a.binaries,
            a.zipfiles,
            a.datas,
            [],
            name='Universal_Markdown_Converter',
            debug=False,
            bootloader_ignore_signals=False,
            strip=False,
            upx=True,
            upx_exclude=[],
            runtime_tmpdir=None,
            console=False,
            disable_windowed_traceback=False,
            target_arch=None,
            codesign_identity=None,
            entitlements_file=None,
            icon='icon.ico' if os.path.exists('icon.ico') else None
        )
        "@ | Out-File -FilePath "universal_md_converter.spec" -Encoding UTF8

    - name: Build executable
      run: |
        echo "Building executable with PyInstaller..."
        pyinstaller --clean --noconfirm universal_md_converter.spec
        echo "Build completed. Checking output..."

    - name: Verify build output
      run: |
        if (-Not (Test-Path "dist\Universal_Markdown_Converter.exe")) {
          echo "❌ Error: Executable not found at dist\Universal_Markdown_Converter.exe"
          echo "Build step likely failed. Checking dist directory contents:"
          if (Test-Path "dist") {
            Get-ChildItem -Path "dist" -Recurse
          } else {
            echo "dist directory does not exist"
          }
          exit 1
        } else {
          echo "✅ Executable found: dist\Universal_Markdown_Converter.exe"
          $fileInfo = Get-Item "dist\Universal_Markdown_Converter.exe"
          echo "File size: $($fileInfo.Length) bytes"
          echo "Created: $($fileInfo.CreationTime)"
        }

    - name: Get version from tag
      id: get_version
      run: |
        if ("${{ github.ref }}" -like "refs/tags/*") {
          $version = "${{ github.ref }}" -replace "refs/tags/", ""
        } else {
          $version = "dev-${{ github.sha }}"
        }
        echo "version=$version" >> $env:GITHUB_OUTPUT

    - name: Create release archive
      run: |
        $version = "${{ steps.get_version.outputs.version }}"
        $archiveName = "Universal-Markdown-Converter-$version-Windows.zip"
        echo "Creating release archive: $archiveName"

        # Verify the executable exists before archiving
        if (-Not (Test-Path "dist\Universal_Markdown_Converter.exe")) {
          echo "❌ Error: Cannot create archive - executable not found"
          exit 1
        }

        Compress-Archive -Path "dist\Universal_Markdown_Converter.exe" -DestinationPath $archiveName -Force
        echo "✅ Archive created: $archiveName"

        # Verify archive was created
        if (Test-Path $archiveName) {
          $archiveInfo = Get-Item $archiveName
          echo "Archive size: $($archiveInfo.Length) bytes"
        }

        echo "archive_name=$archiveName" >> $env:GITHUB_OUTPUT
      id: create_archive

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: windows-executable
        path: dist/Universal_Markdown_Converter.exe

    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: ${{ steps.create_archive.outputs.archive_name }}
        name: Release ${{ steps.get_version.outputs.version }}
        body: |
          ## Universal Markdown Converter ${{ steps.get_version.outputs.version }}

          ### 🚀 Features
          - Convert Markdown to HTML and PDF
          - Professional GUI interface with custom smoke.png icon
          - Batch conversion support
          - Header removal option
          - Portable Windows executable

          ### 📥 Download
          - **Windows**: Download the ZIP file below
          - **Other platforms**: Clone the repository and run the Python script

          ### 🔧 Usage
          1. Download and extract the ZIP file
          2. Run `Universal_Markdown_Converter.exe`
          3. No Python installation required!

          ### 📋 Requirements for PDF conversion
          - Chrome or Chromium browser (for PDF generation)

          ---
          **File size**: ~30MB (includes Python runtime and all dependencies)
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
